<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <artifactId>kakadu</artifactId>
  <version>7.10.7-1-SNAPSHOT</version>
  <name>docker-kakadu</name>
  <description>A Docker build for the Kakadu JPEG-2000 library</description>
  <url>https://github.com/uclalibrary/docker-kakadu</url>

  <licenses>
    <license>
      <name>The 3-Clause BSD License</name>
      <url>https://opensource.org/licenses/BSD-3-clause</url>
    </license>
  </licenses>

  <scm>
    <connection>scm:git:git@github.com:uclalibrary/docker-kakadu.git</connection>
    <developerConnection>scm:git:git@github.com:uclalibrary/docker-kakadu.git</developerConnection>
    <url>git@github.com:uclalibrary/docker-kakadu.git</url>
  </scm>

  <issueManagement>
    <system>GitHub</system>
    <url>https://github.com/uclalibrary/docker-kakadu/issues</url>
  </issueManagement>

  <developers>
    <developer>
      <id>ksclarke</id>
      <name>Kevin S. Clarke</name>
      <email>ksclarke@ksclarke.io</email>
      <organization>UCLA Library</organization>
      <organizationUrl>http://github.com/uclalibrary</organizationUrl>
      <timezone>America/New_York</timezone>
    </developer>
    <developer>
      <id>cachemeoutside</id>
      <name>Anthony Vuong</name>
      <email>avuong@cachemeoutside.io</email>
      <organization>UCLA Library</organization>
      <organizationUrl>http://github.com/uclalibrary</organizationUrl>
      <timezone>America/Los_Angeles</timezone>
    </developer>
    <developer>
      <id>markmatney</id>
      <name>Mark A. Matney, Jr.</name>
      <email>mmatney@library.ucla.edu</email>
      <organization>UCLA Library</organization>
      <organizationUrl>http://github.com/uclalibrary</organizationUrl>
      <timezone>America/Los_Angeles</timezone>
    </developer>
    <developer>
      <id>DRickard</id>
      <name>David Rickard</name>
      <email>drickard1967@library.ucla.edu</email>
      <organization>UCLA Library</organization>
      <organizationUrl>http://github.com/uclalibrary</organizationUrl>
      <timezone>America/Los_Angeles</timezone>
    </developer>
  </developers>

  <properties>
    <!-- What version of Kakadu are we using? This must be user supplied. -->
    <kakadu.version></kakadu.version>

    <!-- Git repo with Kakadu source code (ours is private; override with yours) -->
    <kakadu.git.repo>scm:git:git@github.com:uclalibrary/kakadu.git</kakadu.git.repo>

    <!-- Docker/OS package versions are defined in the default profile at the bottom of the POM file -->

    <!-- Java dependency versions -->
    <freelib.utils.version>2.4.0</freelib.utils.version>
    <freelib.maven.version>0.3.0</freelib.maven.version>
    <jsoup.version>1.14.2</jsoup.version>
    <scm.plugin.version>1.12.0</scm.plugin.version>
    <deploy.plugin.version>2.8.2</deploy.plugin.version>
    <testcontainers.version>1.16.0</testcontainers.version>
    <xml.maven.plugin.version>1.0.2</xml.maven.plugin.version>
    <docker.maven.plugin.version>0.37.0</docker.maven.plugin.version>
    <maven.download.plugin.version>1.6.7</maven.download.plugin.version>

    <!-- What level of logging we want to see, by default, in our tests and default container config -->
    <logLevel>ERROR</logLevel>
    <testLogLevel>ERROR</testLogLevel>

    <!-- The Docker registry user and password used for publishing images -->
    <docker.registry.username />
    <docker.registry.password />

    <!-- The registry account, if supplied, must end with a slash (e.g. "account/") -->
    <docker.registry.account />

    <!-- Additional Docker configurations -->
    <docker.cleanup>remove</docker.cleanup>
    <docker.showLogs>true</docker.showLogs>
  </properties>

  <dependencies>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>info.freelibrary</groupId>
      <artifactId>freelib-utils</artifactId>
      <version>${freelib.utils.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>testcontainers</artifactId>
      <version>${testcontainers.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
    <testResources>
      <testResource>
        <directory>src/test/resources</directory>
        <filtering>true</filtering>
      </testResource>

      <!-- We can also override the default logging configuration with a file in our root project directory -->
      <testResource>
        <directory>${basedir}</directory>
        <includes>
          <include>logback-test.xml</include>
        </includes>
        <filtering>true</filtering>
      </testResource>
    </testResources>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <compilerArgs>
            <arg>-Xlint:all</arg>
          </compilerArgs>
        </configuration>
      </plugin>

      <!-- Deploying Docker image instead of a Jar file so skip this -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>${deploy.plugin.version}</version>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>

      <!-- Generates a message bundle class for use in the Java tests -->
      <!--<![CDATA[
        To run the generate-codes plugin manually: mvn info.freelibrary:freelib-utils:generate-codes
      ]]>-->
      <plugin>
        <groupId>info.freelibrary</groupId>
        <artifactId>freelib-maven-plugins</artifactId>
        <version>${freelib.maven.version}</version>
        <executions>
          <execution>
            <phase>process-resources</phase>
            <goals>
              <goal>generate-codes</goal>
            </goals>
            <configuration>
              <generatedSourcesDirectory>src/main/generated</generatedSourcesDirectory>
              <messageFiles>
                <messageFile>src/main/resources/kakadu_messages.xml</messageFile>
              </messageFiles>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- PMD is an extensible cross-language static code analyzer -->
      <plugin>
        <artifactId>maven-pmd-plugin</artifactId>
      </plugin>

      <!-- Generates Javadocs -->
      <plugin>
        <artifactId>maven-javadoc-plugin</artifactId>
        <dependencies>
          <dependency>
            <groupId>info.freelibrary</groupId>
            <artifactId>freelib-resources</artifactId>
            <version>${freelib.resources.version}</version>
          </dependency>
        </dependencies>
        <configuration>
          <stylesheetfile>javadocs.css</stylesheetfile>
          <nonavbar>true</nonavbar>
          <show>public</show>
          <nosince>true</nosince>
          <notimestamp>true</notimestamp>
          <bottom>Â </bottom>
          <detectLinks>false</detectLinks>
          <additionalJOptions>
            <additionalJOption>-J-Dhttp.agent=maven-javadoc-plugin-${project.name}</additionalJOption>
          </additionalJOptions>
          <links>
            <link>https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/</link>
          </links>
          <sourcepath>src/main/java:src/main/generated</sourcepath>
        </configuration>
        <executions>
          <execution>
            <id>site-javadocs</id>
            <phase>site</phase>
            <goals>
              <goal>javadoc</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Checkstyle ensures adherence to coding standards -->
      <plugin>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <configuration>
          <consoleOutput>true</consoleOutput>
          <logViolationsToConsole>true</logViolationsToConsole>
          <violationSeverity>warning</violationSeverity>
          <includeTestSourceDirectory>true</includeTestSourceDirectory>
        </configuration>
      </plugin>

      <!-- Enforcer enforces some basic characteristics of the project -->
      <plugin>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <execution>
            <id>enforce-java</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireJavaVersion>
                  <version>[1.11.0,)</version>
                </requireJavaVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Maven dependency helps freelib-resources copy files into the project -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <dependencies>
          <dependency>
            <groupId>org.apache.maven.shared</groupId>
            <artifactId>maven-dependency-analyzer</artifactId>
            <version>${maven.dependency.analyzer.version}</version>
            <exclusions>
              <exclusion>
                <artifactId>maven-project</artifactId>
                <groupId>org.apache.maven</groupId>
              </exclusion>
            </exclusions>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>unpack-build-resources</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>info.freelibrary</groupId>
                  <artifactId>freelib-resources</artifactId>
                  <version>${freelib.resources.version}</version>
                  <type>jar</type>
                  <includes>eclipse/**/*,checkstyle/**/*,pmd/**/*,travis/**/*</includes>
                  <outputDirectory>${basedir}/target/build-resources</outputDirectory>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- The build-helper plug-in gets us a dynamic port for testing -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
      </plugin>

      <!-- Download test images -->
      <plugin>
        <groupId>com.googlecode.maven-download-plugin</groupId>
        <artifactId>download-maven-plugin</artifactId>
        <version>${maven.download.plugin.version}</version>
        <executions>
          <execution>
            <id>install-test-images</id>
            <phase>generate-test-resources</phase>
            <goals>
              <goal>wget</goal>
            </goals>
            <!-- Download some test images too large to store in GitHub -->
            <configuration>
              <url>https://s3.amazonaws.com/ksclarke-data/jiiify-image-test-images.zip</url>
              <unpack>true</unpack>
              <outputDirectory>src/test/resources/images</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>${docker.maven.plugin.version}</version>
        <configuration>
          <logStdout>true</logStdout>
          <verbose>true</verbose>
          <images>
            <image>
              <name>${docker.registry.account}${project.artifactId}:%l</name>
              <build>
                <dockerFile>${project.basedir}/src/main/docker/Dockerfile</dockerFile>
              </build>
            </image>
          </images>
        </configuration>
        <executions>

          <!-- Builds the Docker image -->
          <execution>
            <id>docker-build</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>build</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- JUnit runs our tests -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <excludes>
            <exclude>**/*</exclude>
          </excludes>
          <forkCount>1</forkCount><!-- Multiple forks result in multiple containers -->
          <useSystemClassLoader>false</useSystemClassLoader> <!-- Override parent project setting -->
        </configuration>
        <executions>
          <execution>
            <id>functional-tests</id>
            <phase>integration-test</phase>
            <goals>
              <goal>test</goal>
            </goals>
            <configuration>
              <includes>
                <include>**/*FT.java</include>
                <include>**/*IT.java</include>
              </includes>
              <excludes>
                <exclude>**/*Test.java</exclude>
              </excludes>
              <argLine>${jacoco.agent.arg}</argLine>
              <systemPropertyVariables>
                <kdu.version>${project.version}</kdu.version>
                <kakadu.version>${kakadu.version}</kakadu.version>
                <container.tag>${docker.registry.account}${project.artifactId}:${project.version}</container.tag>
              </systemPropertyVariables>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Check the project's XML files to make sure they are well-formed -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>xml-maven-plugin</artifactId>
        <version>${xml.maven.plugin.version}</version>
        <executions>
          <execution>
            <phase>validate</phase>
            <goals>
              <goal>validate</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <validationSets>
            <validationSet>
              <dir>src/test/resources</dir>
              <includes>logback-test.xml</includes>
            </validationSet>
          </validationSets>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <profiles>

    <!--A profile that builds Kakadu's proprietary source code -->
    <profile>
      <id>kakadu</id>
      <activation>
        <property>
          <name>kakadu.version</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-scm-plugin</artifactId>
            <version>${scm.plugin.version}</version>
            <executions>
              <execution>
                <id>kakadu-checkout</id>
                <phase>generate-sources</phase>
                <goals>
                  <goal>checkout</goal>
                </goals>
                <configuration>
                  <checkoutDirectory>${basedir}/src/main/docker/kakadu</checkoutDirectory>
                  <connectionUrl>${kakadu.git.repo}</connectionUrl>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- The default build profile that we use, contains stable and pinned versions -->
    <profile>
      <id>default</id>
      <activation>
        <activeByDefault>true</activeByDefault>
        <property>
          <name>!unpinned</name>
        </property>
      </activation>
      <properties>
        <!-- What's the latest version? Cf. https://ubuntuupdates.org/package_metas -->
        <openjdk.version>=11.0.11+9-0ubuntu2~20.04</openjdk.version>
        <golang.version>=2:1.13~1ubuntu2</golang.version>
        <git.version>=1:2.25.1-1ubuntu3.2</git.version>
        <gcc.version>=4:9.3.0-1ubuntu2</gcc.version>
        <make.version>=4.2.1-1.2</make.version>
        <libtiff.version>=4.1.0+git191117-2ubuntu0.20.04.1</libtiff.version>
        <build.essential.version>=12.8ubuntu1.1</build.essential.version>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${docker.maven.plugin.version}</version>
            <executions>
              <execution>
                <id>docker-deploy</id>
                <phase>deploy</phase>
                <goals>
                  <goal>push</goal>
                </goals>
                <configuration>
                  <images>
                    <image>
                      <!-- Registry account, if supplied, must end in a slash (e.g. "account/") -->
                      <!-- The %l at the end translates to "latest" if version ends in "-SNAPSHOT" -->
                      <name>${docker.registry.account}${project.artifactId}:%l</name>
                    </image>
                  </images>
                  <authConfig>
                    <username>${docker.registry.username}</username>
                    <password>${docker.registry.password}</password>
                  </authConfig>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>unpinned</id>
      <activation>
        <property>
          <name>unpinned</name>
        </property>
      </activation>
      <properties>
        <openjdk.version></openjdk.version>
        <golang.version></golang.version>
        <gcc.version></gcc.version>
        <git.version></git.version>
        <make.version></make.version>
        <libtiff.version></libtiff.version>
        <build.essential.version></build.essential.version>
      </properties>
    </profile>
  </profiles>

  <parent>
    <artifactId>freelib-parent</artifactId>
    <groupId>info.freelibrary</groupId>
    <version>4.0.1</version>
  </parent>

</project>
